---
title: "Baltic geochemistry"
format: gfm
editor: visual
---

The purpose of this document is to perform a multiple regression in order to better predict upward fluxes of methane from the sediment-water interface in the Baltic Sea. Data are compiled, and largely collected, by Laura Lapham.

Read in the data. Note that I have converted O2 measured by Winkler (in mL per liter) to match O2 measured by CTD (in mg per liter) using the conversion factor Laura supplied:

$10\textrm{mL O}_2 = 13.3\textrm{ mg O}_2$

```{r, message=FALSE}
library(tidyverse)
theme_set(theme_classic())

### Misc global parameters
col.names = c("seq.num", "stn", "flux.SWI", "flux.SMTZ", "SMT.depth.cm",
              "R.swi.smtz", "water.depth.m", "bottom.sal", "bottom.temp", 
              "sed.rate", "POC.rate", "O2.CTD", "O2.Winkler", 
              "lat", "lon", "ref")
flux.label <- expression(paste(CH[4], " flux to SWI, ", mu, "mol", " ", m^2, " ", day^{-1}))

# Read data, combine O2 values from CTD + Winkler, calculate log CH4 flux from SWI
d <- read_csv("data/baltic_geochem.csv",
              col_names = col.names, 
              skip = 1) %>%
  mutate(O2 = case_when(!is.na(O2.CTD) == TRUE ~ O2.CTD,
                        !is.na(O2.Winkler) == TRUE ~ O2.Winkler * 13.3 / 10,
                        TRUE ~ as.numeric(NA))) %>%
  filter(!is.na(flux.SWI)) 

# set zeros to half ot the minimum nonzero value to prevent problems with log values
min.flux.SWI <- min(d$flux.SWI[d$flux.SWI > 0], na.rm=TRUE) / 2 
d <- d %>% 
  mutate(log10.flux.SWI = case_when(flux.SWI==0 ~ log10(min.flux.SWI),
                                    TRUE ~ log10(flux.SWI)))
```


# Mulitvariate model

The data that are present in most samples are:
```{r, echo=FALSE}
apply(d, MARGIN = 2, function(x) sum(!is.na(x)))
```


* CH4 across SWI
* SMT depth
* water depth
* bottom salinity
* bottom temp
* POC accumulation rate

So let's make a linear model with all of these quantities. This will take the form of the following equation: 

![](https://latex.codecogs.com/svg.image?\textrm{flux}_{\textrm{CH4}\rightarrow\textrm{SWI}}&space;&space;=&space;\beta_1\textrm{SMT&space;depth}&space;&plus;&space;\\&space;\beta_2\textrm{water&space;depth}&space;&plus;&space;\\&space;\beta_3\textrm{bottom&space;sal}&space;&plus;&space;\\&space;\beta_4\textrm{bottom&space;temp}&space;&plus;&space;\\&space;\beta_5\textrm{POC&space;accumulation&space;rate}&space;&plus;&space;\\\epsilon&space;)

<!--
$$
\textrm{flux}_{\textrm{CH4}\rightarrow{SWI}} = \Beta_1\textrm{SMT depth} + \Beta_2\textrm{water depth} + \Beta_3\textrm{bottom sal} + \Beta_4\textrm{bottom temp} + \Beta_5\textrm{POC accumulation rate} 
$$
-->

```{r}
m_naive <- lm(flux.SWI ~ SMT.depth.cm + water.depth.m + bottom.sal + bottom.temp + POC.rate, data = d)
summary(m_naive)
```
This tells us that there is a significant relationship between CH4 flux through the SWI and bottom water temperature and water depth, and marginally SMTZ depth and bottom salinity. The "adjusted R-squared" (which accounts for the fact that a model with more variables will always perform better) is only 0.11.

I think what is happening here has to do with the distribution of flux values:

```{r}
ggplot(d, aes(x=flux.SWI)) + 
  geom_histogram()
```
There are a few really big values, (`r sum(d$flux.SWI > 500)`), which I think are driving the model. 

(I'm planning to visualize this, but that'll have to wait). 

A better thing to do would be to take the log of the fluxes, in order to get a more normal distribution of values. Note that for the zero fluxes, I adjusted them to half the log_10 of the minimum flux value. 

```{r, message=FALSE, warning=FALSE}
ggplot(d, aes(x=log10.flux.SWI)) + 
  geom_histogram()
```
This looks much more normally-distributed, although obviously there are a bunch of low values. I should probably use a [zero-inflated linear model](https://towardsdatascience.com/zero-inflated-regression-c7dfc656d8af) but I don't really know how to do that^[It seems that what I want to do is to preface the linear regression with a classifier; probably a logistic regression. Not sure how to do that but whatevs.] 

Let's make the same linear regression, but predicting the log of flux instead of the actual value. 

```{r}
m_log_big <- lm(log10.flux.SWI ~ SMT.depth.cm + water.depth.m + bottom.sal + bottom.temp + POC.rate , data = d)
summary(m_log_big)
```
Whaddya know, this one actually looks better. SMT depth, water depth, bottom water salinity, and bottom water temperature are all significant predictors of log CH4 flux. Adjusted R2 is 0.44, which is a massive improvement. 

Like zero-inflated linear models, I don't really understand model selection. Which is great, because it means that I can feel good about dropping out the non-significant predictor without further justification. 

```{r}
m_log_selected <- lm(log10.flux.SWI ~ SMT.depth.cm + water.depth.m + bottom.sal + bottom.temp , data = d)
summary(m_log_selected)
```
The adjusted R-squared got slightly worse, but it is probably a better model in the sense that the variable we dropped is the hardest one to measure. 

So, the way to interpret this is that the log-base-10 of methane flux to the SWI is given by: 

log(flux) = 0.915 -0.00230 * SMT depth (cm) + 0.00357 * water depth (m) - 0.06837 * bottom water salinity + 0.178 * bottom water temp. 

## Visualization

We really shouldn't rely on a model that we haven't visualized. However, visualizing this kind of model is kind of a pain. I know how to do it, but I need to take a nap, so I'm sending this out without visualizations. Tune in later!

# Conclusions

As it stands, this model *significantly* predicts CH4 flux through the sediment-water interface. Significant, in this sense, means that a random data set would be unlikely to fit the model as well as this data set does. 

However, that is different from a *useful* prediction. Some caveats to these data:

* Because of the many zero values in SWI flux, the slopes in this model will be a little bit off. I really should go back and use a zero-inflated model, but I need to learn to do that. 
* R^2 is like 0.4. That tells us that the model predictions are not going to be terribly precise. 
* We're predicting log methane fluxes. So all the error will get even bigger when we convert to methane fluxes.

If you want, I can figure out a way to estamate the error in the methane flux predictions from the error in the model. But maybe that's more than is necessary. 